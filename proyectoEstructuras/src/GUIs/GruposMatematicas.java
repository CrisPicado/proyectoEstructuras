/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package GUIs;

import clases.NodoLS;
import clases.Rutinas;
import static clases.Rutinas.inicioLS;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;
import clases.*;
import static clases.Rutinas.inicioCMatuMat;
import javax.swing.table.TableColumn;

/**
 *
 * @author Cris Picado
 */
public class GruposMatematicas extends javax.swing.JFrame {

    DefaultTableModel modelo;
    String[] titulos = {"No. Cedula", "Nombre", "Apellido Paterno", "Apellido Materno", "Contacto", "Correo Electronico", "Tipo Horario", "Horario"};
    String[] datos = new String[8];

    private String nombre, cedula, apePa, apeMa, tipoHorario, horarioDisponible, contacto, correo;

    /**
     * Creates new form GruposMatutinos
     */
    public GruposMatematicas() {
        initComponents();
        setLocationRelativeTo(null);
        setResizable(false);
        setTitle("Reporte Matriculas - Grupos Matematicas");
        modelo = new DefaultTableModel(null, titulos);
        tblRegistroMatriculasM.setModel(modelo);

    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        lblTitulo = new javax.swing.JLabel();
        jPanel2 = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        tblRegistroMatriculasM = new javax.swing.JTable();
        btnGenerar = new javax.swing.JButton();
        btnMostrar = new javax.swing.JButton();
        cbxHorarios = new javax.swing.JComboBox<>();
        jLabel17 = new javax.swing.JLabel();
        btnCln = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        getContentPane().setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        jPanel1.setBackground(new java.awt.Color(255, 255, 255));

        lblTitulo.setBackground(new java.awt.Color(0, 0, 0));
        lblTitulo.setFont(new java.awt.Font("Verdana", 1, 36)); // NOI18N
        lblTitulo.setForeground(new java.awt.Color(0, 0, 0));
        lblTitulo.setText("Reporte Matriculas");

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(lblTitulo)
                .addContainerGap(544, Short.MAX_VALUE))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(14, 14, 14)
                .addComponent(lblTitulo)
                .addContainerGap(21, Short.MAX_VALUE))
        );

        getContentPane().add(jPanel1, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 0, 930, 80));

        jPanel2.setBackground(new java.awt.Color(255, 102, 102));

        tblRegistroMatriculasM.setFont(new java.awt.Font("Verdana", 0, 12)); // NOI18N
        tblRegistroMatriculasM.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        jScrollPane1.setViewportView(tblRegistroMatriculasM);

        btnGenerar.setFont(new java.awt.Font("Verdana", 0, 14)); // NOI18N
        btnGenerar.setText("Generar ");
        btnGenerar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnGenerarActionPerformed(evt);
            }
        });

        btnMostrar.setFont(new java.awt.Font("Verdana", 0, 14)); // NOI18N
        btnMostrar.setText("Mostrar");
        btnMostrar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnMostrarActionPerformed(evt);
            }
        });

        cbxHorarios.setFont(new java.awt.Font("Verdana", 0, 14)); // NOI18N
        cbxHorarios.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "-Seleccione Tipo Horario-", "Matutino", "Vespertino", "Nocturno" }));

        jLabel17.setIcon(new javax.swing.ImageIcon(getClass().getResource("/imgs/icons8_back_to_32px.png"))); // NOI18N
        jLabel17.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jLabel17MouseClicked(evt);
            }
        });

        btnCln.setFont(new java.awt.Font("Verdana", 0, 14)); // NOI18N
        btnCln.setText("Limpiar Tabla");
        btnCln.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnClnActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addComponent(jLabel17)
                        .addGap(47, 47, 47)
                        .addComponent(cbxHorarios, javax.swing.GroupLayout.PREFERRED_SIZE, 165, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(105, 105, 105)
                        .addComponent(btnGenerar)
                        .addGap(137, 137, 137)
                        .addComponent(btnMostrar)
                        .addGap(80, 80, 80)
                        .addComponent(btnCln))
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 910, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(14, Short.MAX_VALUE))
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addGap(36, 36, 36)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 280, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(47, 47, 47)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(btnGenerar)
                        .addComponent(btnMostrar)
                        .addComponent(cbxHorarios, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(btnCln))
                    .addComponent(jLabel17, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(17, Short.MAX_VALUE))
        );

        getContentPane().add(jPanel2, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 80, 930, 420));

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void btnGenerarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnGenerarActionPerformed
        // TODO add your handling code here:

        if (cbxHorarios.getSelectedItem().equals("Matutino")) {
            lblTitulo.setText("Reporte Matriculas - Grupos Matutinos");
            copiarMatriculasMCola();
        } else if (cbxHorarios.getSelectedItem().equals("Vespertino")) {
            lblTitulo.setText("Reporte Matriculas - Grupos Vespertinos");
            copiarMatriculasVespertinoCola();
        } else if (cbxHorarios.getSelectedItem().equals("Nocturno")) {
            lblTitulo.setText("Reporte Matriculas - Grupos Nocturnos");
            copiarMatriculasNocCola();
        }

    }//GEN-LAST:event_btnGenerarActionPerformed

    private void btnMostrarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnMostrarActionPerformed
        // TODO add your handling code here:

        if (cbxHorarios.getSelectedItem().equals("Matutino")) {
            lblTitulo.setText("Reporte Matriculas - Grupos Matutinos");
            mostrarColaMatuMateTbl();
        } else if (cbxHorarios.getSelectedItem().equals("Vespertino")) {
            lblTitulo.setText("Reporte Matriculas - Grupos Vespertinos");
            mostrarColaVesperMateTbl();
        } else if (cbxHorarios.getSelectedItem().equals("Nocturno")) {
            lblTitulo.setText("Reporte Matriculas - Grupos Nocturnos");
            mostrarColaNocMateTbl();
        }
    }//GEN-LAST:event_btnMostrarActionPerformed

    private void jLabel17MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jLabel17MouseClicked
        // TODO add your handling code here:
        ModReporteGrupos r = new ModReporteGrupos();
        r.setVisible(true);
        this.dispose();
    }//GEN-LAST:event_jLabel17MouseClicked

    private void btnClnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnClnActionPerformed
        // TODO add your handling code here:
        modelo = new DefaultTableModel(null, titulos);
        tblRegistroMatriculasM.setModel(modelo);
        cbxHorarios.setSelectedIndex(0);
    }//GEN-LAST:event_btnClnActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(GruposMatematicas.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(GruposMatematicas.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(GruposMatematicas.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(GruposMatematicas.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new GruposMatematicas().setVisible(true);
            }
        });
    }

    public void copiarMatriculasMCola() {

        if (!Rutinas.estaLSVacia()) {

            NodoLS aux = inicioLS;
            Rutinas.encolar(aux.getElemento().getNumCedula(), aux.getElemento().getNombre(), aux.getElemento().getApePaterno(), aux.getElemento().getApeMaterno(), aux.getElemento().getContacto(), aux.getElemento().getCorreo(), aux.getElemento().getTipoHorario(), aux.getElemento().getHorario());
            aux = aux.getSiguiente();

            while (aux != null) {
                Rutinas.encolar(aux.getElemento().getNumCedula(), aux.getElemento().getNombre(), aux.getElemento().getApePaterno(), aux.getElemento().getApeMaterno(), aux.getElemento().getContacto(), aux.getElemento().getCorreo(), aux.getElemento().getTipoHorario(), aux.getElemento().getHorario());
                aux = aux.getSiguiente();
            }

            JOptionPane.showMessageDialog(null, "Estudiantes con matricula matutina encolados!");

        } else {
            JOptionPane.showMessageDialog(null, "No se puede copiar. Lista Simple vacía!");
        }

    }

    public void copiarMatriculasVespertinoCola() {

        if (!Rutinas.estaLSVacia()) {

            NodoLS aux = Rutinas.inicioLS;
            Rutinas.encolarVesperMat(aux.getElemento().getNumCedula(), aux.getElemento().getNombre(), aux.getElemento().getApePaterno(), aux.getElemento().getApeMaterno(), aux.getElemento().getContacto(), aux.getElemento().getCorreo(), aux.getElemento().getTipoHorario(), aux.getElemento().getHorario());
            aux = aux.getSiguiente();

            while (aux != null) {
                Rutinas.encolarVesperMat(aux.getElemento().getNumCedula(), aux.getElemento().getNombre(), aux.getElemento().getApePaterno(), aux.getElemento().getApeMaterno(), aux.getElemento().getContacto(), aux.getElemento().getCorreo(), aux.getElemento().getTipoHorario(), aux.getElemento().getHorario());
                aux = aux.getSiguiente();
            }

            JOptionPane.showMessageDialog(null, "Estudiantes con matricula vespertinos encolados!");

        } else {
            JOptionPane.showMessageDialog(null, "No se puede copiar. Lista Simple vacía!");
        }

    }

    public void copiarMatriculasNocCola() {

        if (!Rutinas.estaLSVacia()) {

            NodoLS aux = Rutinas.inicioLS;
            Rutinas.encolarNocMat(aux.getElemento().getNumCedula(), aux.getElemento().getNombre(), aux.getElemento().getApePaterno(), aux.getElemento().getApeMaterno(), aux.getElemento().getContacto(), aux.getElemento().getCorreo(), aux.getElemento().getTipoHorario(), aux.getElemento().getHorario());
            aux = aux.getSiguiente();

            while (aux != null) {
                Rutinas.encolarNocMat(aux.getElemento().getNumCedula(), aux.getElemento().getNombre(), aux.getElemento().getApePaterno(), aux.getElemento().getApeMaterno(), aux.getElemento().getContacto(), aux.getElemento().getCorreo(), aux.getElemento().getTipoHorario(), aux.getElemento().getHorario());
                aux = aux.getSiguiente();
            }

            JOptionPane.showMessageDialog(null, "Estudiantes con matricula Nocturna encolados!");

        } else {
            JOptionPane.showMessageDialog(null, "No se puede copiar. Lista Simple vacía!");
        }

    }

    public void mostrarColaMatuMateTbl() {

        NodoC aux = Rutinas.inicioCMatuMat;

        if (!Rutinas.estaColaMatuMatVacia()) {

            while (aux != null) {

                try {

                    cedula = aux.getElemento().getNumCedula();
                    nombre = aux.getElemento().getNombre();
                    apePa = aux.getElemento().getApePaterno();
                    apeMa = aux.getElemento().getApeMaterno();
                    contacto = aux.getElemento().getContacto();
                    correo = aux.getElemento().getCorreo();
                    tipoHorario = aux.getElemento().getTipoHorario();
                    horarioDisponible = aux.getElemento().getHorario();

                    Object[] fila = {cedula, nombre, apePa, apeMa, contacto, correo, tipoHorario, horarioDisponible};
                    modelo.addRow(fila);

                    TableColumn cedula = tblRegistroMatriculasM.getColumn("No. Cedula");
                    cedula.setMaxWidth(100);
                    cedula.setMinWidth(100);
                    TableColumn nombre = tblRegistroMatriculasM.getColumn("Nombre");
                    nombre.setMaxWidth(90);
                    nombre.setMinWidth(90);
                    TableColumn apellidoP = tblRegistroMatriculasM.getColumn("Apellido Paterno");
                    apellidoP.setMaxWidth(100);
                    apellidoP.setMinWidth(100);
                    TableColumn apellidoM = tblRegistroMatriculasM.getColumn("Apellido Materno");
                    apellidoM.setMaxWidth(110);
                    apellidoM.setMinWidth(110);
                    TableColumn contacto = tblRegistroMatriculasM.getColumn("Contacto");
                    contacto.setMaxWidth(87);
                    contacto.setMinWidth(87);
                    TableColumn correo = tblRegistroMatriculasM.getColumn("Correo Electronico");
                    correo.setMaxWidth(200);
                    correo.setMinWidth(200);
                    TableColumn tipoH = tblRegistroMatriculasM.getColumn("Tipo Horario");
                    tipoH.setMaxWidth(90);
                    tipoH.setMinWidth(90);
                    TableColumn horario = tblRegistroMatriculasM.getColumn("Horario");
                    horario.setMaxWidth(120);
                    horario.setMinWidth(120);

                    aux = aux.getSiguiente();
                } catch (Exception e) {
                    System.out.println("Error: Revisar metodo mostrar cola" + e);
                }

            }

        } else {
            JOptionPane.showMessageDialog(null, "Error: Imposible mostrar cola, cola vacia.", "Reporte matriculas matutinas", JOptionPane.ERROR_MESSAGE);
        }

    }

    public void mostrarColaVesperMateTbl() {

        NodoC aux = Rutinas.inicioCVesMat;

        if (!Rutinas.estaColaVesperMatVacia()) {

            while (aux != null) {

                try {

                    cedula = aux.getElemento().getNumCedula();
                    nombre = aux.getElemento().getNombre();
                    apePa = aux.getElemento().getApePaterno();
                    apeMa = aux.getElemento().getApeMaterno();
                    contacto = aux.getElemento().getContacto();
                    correo = aux.getElemento().getCorreo();
                    tipoHorario = aux.getElemento().getTipoHorario();
                    horarioDisponible = aux.getElemento().getHorario();

                    Object[] fila = {cedula, nombre, apePa, apeMa, contacto, correo, tipoHorario, horarioDisponible};
                    modelo.addRow(fila);

                    TableColumn cedula = tblRegistroMatriculasM.getColumn("No. Cedula");
                    cedula.setMaxWidth(100);
                    cedula.setMinWidth(100);
                    TableColumn nombre = tblRegistroMatriculasM.getColumn("Nombre");
                    nombre.setMaxWidth(90);
                    nombre.setMinWidth(90);
                    TableColumn apellidoP = tblRegistroMatriculasM.getColumn("Apellido Paterno");
                    apellidoP.setMaxWidth(100);
                    apellidoP.setMinWidth(100);
                    TableColumn apellidoM = tblRegistroMatriculasM.getColumn("Apellido Materno");
                    apellidoM.setMaxWidth(110);
                    apellidoM.setMinWidth(110);
                    TableColumn contacto = tblRegistroMatriculasM.getColumn("Contacto");
                    contacto.setMaxWidth(87);
                    contacto.setMinWidth(87);
                    TableColumn correo = tblRegistroMatriculasM.getColumn("Correo Electronico");
                    correo.setMaxWidth(200);
                    correo.setMinWidth(200);
                    TableColumn tipoH = tblRegistroMatriculasM.getColumn("Tipo Horario");
                    tipoH.setMaxWidth(90);
                    tipoH.setMinWidth(90);
                    TableColumn horario = tblRegistroMatriculasM.getColumn("Horario");
                    horario.setMaxWidth(120);
                    horario.setMinWidth(120);
                    
                    aux = aux.getSiguiente();
                } catch (Exception e) {
                    System.out.println("Error: Revisar metodo mostrar cola" + e);
                }

            }

        } else {
            JOptionPane.showMessageDialog(null, "Error: Imposible mostrar cola, cola vacia.", "Reporte matriculas matutinas", JOptionPane.ERROR_MESSAGE);
        }

    }

    public void mostrarColaNocMateTbl() {

        NodoC aux = Rutinas.inicioCNocMat;

        if (!Rutinas.estaColaNocMatVacia()) {

            while (aux != null) {

                try {
                    cedula = aux.getElemento().getNumCedula();
                    nombre = aux.getElemento().getNombre();
                    apePa = aux.getElemento().getApePaterno();
                    apeMa = aux.getElemento().getApeMaterno();
                    contacto = aux.getElemento().getContacto();
                    correo = aux.getElemento().getCorreo();
                    tipoHorario = aux.getElemento().getTipoHorario();
                    horarioDisponible = aux.getElemento().getHorario();

                    Object[] fila = {cedula, nombre, apePa, apeMa, contacto, correo, tipoHorario, horarioDisponible};
                    modelo.addRow(fila);

                    TableColumn cedula = tblRegistroMatriculasM.getColumn("No. Cedula");
                    cedula.setMaxWidth(100);
                    cedula.setMinWidth(100);
                    TableColumn nombre = tblRegistroMatriculasM.getColumn("Nombre");
                    nombre.setMaxWidth(90);
                    nombre.setMinWidth(90);
                    TableColumn apellidoP = tblRegistroMatriculasM.getColumn("Apellido Paterno");
                    apellidoP.setMaxWidth(100);
                    apellidoP.setMinWidth(100);
                    TableColumn apellidoM = tblRegistroMatriculasM.getColumn("Apellido Materno");
                    apellidoM.setMaxWidth(110);
                    apellidoM.setMinWidth(110);
                    TableColumn contacto = tblRegistroMatriculasM.getColumn("Contacto");
                    contacto.setMaxWidth(87);
                    contacto.setMinWidth(87);
                    TableColumn correo = tblRegistroMatriculasM.getColumn("Correo Electronico");
                    correo.setMaxWidth(200);
                    correo.setMinWidth(200);
                    TableColumn tipoH = tblRegistroMatriculasM.getColumn("Tipo Horario");
                    tipoH.setMaxWidth(90);
                    tipoH.setMinWidth(90);
                    TableColumn horario = tblRegistroMatriculasM.getColumn("Horario");
                    horario.setMaxWidth(120);
                    horario.setMinWidth(120);
                    
                    aux = aux.getSiguiente();
                } catch (Exception e) {
                    System.out.println(e);
                }

            }
        }

    }


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnCln;
    private javax.swing.JButton btnGenerar;
    private javax.swing.JButton btnMostrar;
    private javax.swing.JComboBox<String> cbxHorarios;
    private javax.swing.JLabel jLabel17;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JLabel lblTitulo;
    private javax.swing.JTable tblRegistroMatriculasM;
    // End of variables declaration//GEN-END:variables
}
